CREATE DATABASE LOJA;
USE LOJA;
```

Criar Tabelas
*Tabela PRODUTOS*
```
CREATE TABLE PRODUTOS (
  CODIGO INT PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  PRECO DECIMAL(10, 2) NOT NULL,
  ESTOQUE INT NOT NULL
);
```

*Tabela VENDAS*
```
CREATE TABLE VENDAS (
  CODIGO_VENDA INT PRIMARY KEY,
  CODIGO_PRODUTO INT,
  QUANTIDADE INT NOT NULL,
  DATA_VENDA DATE NOT NULL,
  FOREIGN KEY (CODIGO_PRODUTO) REFERENCES PRODUTOS(CODIGO)
);
```

Inserir Dados
*Tabela PRODUTOS*
```
INSERT INTO PRODUTOS (CODIGO, NOME, PRECO, ESTOQUE)
VALUES 
(1, 'Produto A', 10.99, 100),
(2, 'Produto B', 20.99, 50),
(3, 'Produto C', 30.99, 200);
```

Criar Trigger
Criar um trigger que atualize o estoque quando uma venda for inserida:
```
CREATE TRIGGER ATUALIZA_ESTOQUE
AFTER INSERT ON VENDAS
FOR EACH ROW
BEGIN
  UPDATE PRODUTOS
  SET ESTOQUE = ESTOQUE - NEW.QUANTIDADE
  WHERE CODIGO = NEW.CODIGO_PRODUTO;
END;
```

Testar o Trigger
Inserir uma venda:
```
INSERT INTO VENDAS (CODIGO_VENDA, CODIGO_PRODUTO, QUANTIDADE, DATA_VENDA)
VALUES (1, 1, 5, '2024-01-01');
```

Verificar o estoque atualizado:
```
SELECT * FROM PRODUTOS;
```

Outros Exemplos de Triggers
- Trigger para evitar vendas com quantidade maior que o estoque:
```
CREATE TRIGGER VERIFICA_ESTOQUE
BEFORE INSERT ON VENDAS
FOR EACH ROW
BEGIN
  IF NEW.QUANTIDADE > (SELECT ESTOQUE FROM PRODUTOS WHERE CODIGO = NEW.CODIGO_PRODUTO) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Quantidade maior que o estoque!';
  END IF;
END;
```

- Trigger para atualizar o histórico de preços:
```
CREATE TRIGGER ATUALIZA_HISTORICO_PRECO
AFTER UPDATE ON PRODUTOS
FOR EACH ROW
BEGIN
  INSERT INTO HISTORICO_PRECO (CODIGO_PRODUTO, PRECO_ANTERIOR, PRECO_ATUAL)
  VALUES (OLD.CODIGO, OLD.PRECO, NEW.PRECO);
END;
```
